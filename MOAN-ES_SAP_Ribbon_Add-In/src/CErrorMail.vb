Imports System

''' <summary>
''' Class to generate and send mails with Outlook. 
''' </summary>
''' <remarks></remarks>
Public Class CErrorMail
    Private olApp As Object
    Private mailObj As Object
    Private _recipient As String
    Private subject As String
    Private body As String
    Private errList(1000, 1000) As String
    Private hasErrorList As Boolean
    Private currentErrListRow As Integer

    Private disposedValue As Boolean ' To detect redundant calls

    ''' <summary>
    ''' Set the recipents of the mail. To be called before trying to send the mail. 
    ''' </summary>
    ''' <value>The recipents of the mail.</value>
    ''' <returns>dsadsa</returns>
    ''' <remarks>ad</remarks>
    Public Property recipient() As String
        Get
            Return _recipient
        End Get
        Set(ByVal value As String)
            _recipient = value
        End Set
    End Property

    ''' <summary>
    ''' Constructor for the class.
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub New()
        errList(1, 1) = "Object"
        errList(1, 2) = "Script"
        errList(1, 3) = "Message"
        errList(1, 4) = "Source"
        Me.currentErrListRow = 2
    End Sub

    ''' <summary>
    ''' Preparing the class to send the mail, creating the mail and setting the content of it. To be called before the SendMail function.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub prepareForSend()
        Try
            olApp = CreateObject("Outlook.Application")
            mailObj = olApp.CreateItem(0)
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        mailObj.To = _recipient
        mailObj.Subject = "Auto error report from MOAN ES"
        mailObj.Body = "The following objects have generated errors: " & vbNewLine & vbNewLine & _
                        Me.getErrorList() & vbNewLine & _
                        "This mail has been generated by the MOAN Enterprise Ribbon by user " & Environ("UserName") & " on " & WeekdayName(Weekday(Now, vbMonday)) & ", " & Format(Now(), "yyyy-MM-dd HH:mm")
    End Sub

    ''' <summary>
    ''' Add a error to the list of errors. 
    ''' </summary>
    ''' <param name="obj">The object, for example a sales order.</param>
    ''' <param name="script">The script that encountered a error.</param>
    ''' <param name="message">The error message, from Err.Message.</param>
    ''' <param name="source">The error source, from Err.Source.</param>
    ''' <remarks></remarks>
    Public Sub addError(ByVal obj As String, ByVal script As String, ByVal message As String, ByVal source As String)
        If (Me.hasErrorList = False) Then
            Me.hasErrorList = True
        End If
        errList(Me.currentErrListRow, 1) = obj
        errList(Me.currentErrListRow, 2) = script
        errList(Me.currentErrListRow, 3) = message
        errList(Me.currentErrListRow, 4) = source
        Me.currentErrListRow = Me.currentErrListRow + 1
    End Sub

    ''' <summary>
    ''' Returns the errorlist with all the reported errors. 
    ''' </summary>
    ''' <returns>String errorStr, all the errors from the error list.</returns>
    ''' <remarks></remarks>
    Private Function getErrorList() As String
        Dim i, j As Integer
        Dim errorStr As String = ""
        For i = 1 To currentErrListRow - 1
            For j = 1 To 4
                errorStr = errorStr & Me.errList(i, j) & " |"
                If j = 4 Then
                    errorStr = errorStr & vbNewLine
                End If
            Next
        Next
        Return errorStr
    End Function

    ''' <summary>
    ''' Send the list with errors to the recipent, which has to be specified first with the property. 
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub sendMail()
        prepareForSend()
        Try
            mailObj.Send()
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

End Class

